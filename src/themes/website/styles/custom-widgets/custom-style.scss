// ------------------------------------------------------------
// Material Design Web Components - Custom widgets style import
// ------------------------------------------------------------

@use "@material/icon-button";
@use "@material/button/styles";
@use "@material/list/mdc-list";
@use "@material/menu-surface/mdc-menu-surface";
@use "@material/menu/mdc-menu";
@use "@material/layout-grid/mdc-layout-grid";

@include icon-button.core-styles;

// Fonts import
@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

// Material Icons import
@font-face {
	font-family: 'Material Icons';
	font-style: normal;
	font-weight: 400;
	src: url(iconfont/MaterialIcons-Regular.eot);
	/* For IE6-8 */
	src: local('Material Icons'),
		local('MaterialIcons-Regular'),
		url(fonts/material-icons.woff2) format('woff2'),
		url(iconfont/MaterialIcons-Regular.ttf) format('truetype');
}

.material-icons {
	font-family: 'Material Icons';
	font-weight: normal;
	font-style: normal;
	font-size: 24px;
	line-height: 1;
	letter-spacing: normal;
	text-transform: none;
	display: inline-block;
	white-space: nowrap;
	word-wrap: normal;
	direction: ltr;
	-moz-font-feature-settings: 'liga';
	-moz-osx-font-smoothing: grayscale;
}

// Font variables
$robotoFont: 'Roboto', sans-serif;
$sourceCodeProFont: 'Source Code Pro', monospace;

// Extend to avoid copying
%roboto {
	font-family: $robotoFont !important;
	src: url("/fonts/Roboto-Regular.ttf") !important;
}

%sourceCodePro {
	font-family: $sourceCodeProFont !important;
	src: url("/fonts/SourceCodePro-Bold.ttf") !important;
}

// Color variables
$colors: (
    blue: (
        light: #3E66FB,
        dark: #3B4874,
        hover: rgba(62, 102, 251, 0.4)
    ),
    grey: (
        background: #FAFAFA,
        border: #DEE2E6
    ),
    black: (
        base: #363131
    ),
    white: (
        base: #FFFFFF,
        background: #F5F7FF
    )
);

// Get color function
// Usage: color: getColor(blue, hover)
@function getColor($color, $tone) {
	@if map-has-key($colors, $color) {
		$color: map-get($colors, $color);

		@if map-has-key($color, $tone) {
			$tone: map-get($color, $tone);
			@return $tone;
		}
		@return null;
	}
	@return null;
}