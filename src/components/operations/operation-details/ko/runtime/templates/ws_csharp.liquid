using System;
using System.Net.Http.Headers;
using System.Text;
using System.Net.Http;
using System.Web;

namespace CSWebSocketClientSample
{
    static class Program
    {
        static void Main()
        {
            StartWebSocketClient().GetAwaiter().GetResult();
        }
        
        static async Task StartWebSocketClient()
        {
            ClientWebSocket client = new ClientWebSocket();
            Uri uri = new Uri("{{wsUrl}}");
            var cts = new CancellationTokenSource();
            await client.ConnectAsync(uri, CancellationToken.None);

            Console.WriteLine(client.State);
            Console.WriteLine("Type 'close' to exit or any text to send to server...");

            _ = Task.Factory.StartNew(
                async () =>
                {

                    var buffer = new ArraySegment<byte>(new Byte[1024]);
                    WebSocketReceiveResult result = null;
                    while (!cts.Token.IsCancellationRequested)
                    {
                        using (var ms = new MemoryStream())
                        {
                            do
                            {
                                result = await client.ReceiveAsync(buffer, cts.Token);

                                if (result.MessageType == WebSocketMessageType.Close)
                                {
                                    await client.CloseAsync(WebSocketCloseStatus.NormalClosure, "Server sent close", CancellationToken.None);
                                    cts.Cancel();
                                    return;
                                }

                                ms.Write(buffer.Array, buffer.Offset, result.Count);
                            } while (!result.EndOfMessage);

                            ms.Seek(0, SeekOrigin.Begin);

                            if (result.MessageType == WebSocketMessageType.Text)
                            {
                                using (var reader = new StreamReader(ms, Encoding.UTF8))
                                {
                                    string message = reader.ReadToEnd();
                                    Console.WriteLine("Received: {0}", message);
                                }
                            }

                            Console.WriteLine("Message type: {0}", result.MessageType.ToString());
                        }
                    }
                }, cts.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);

            while (true)
            {
                var message = Console.ReadLine();
                if (message.ToLower() == "close")
                {
                    if (client.State == WebSocketState.Open)
                    {
                        await client.CloseAsync(WebSocketCloseStatus.NormalClosure, "Client sent close", CancellationToken.None);
                    }
                    cts.Cancel();
                    return;
                }
                byte[] sendBytes = Encoding.UTF8.GetBytes(message);
                var sendBuffer = new ArraySegment<byte>(sendBytes);
                await client.SendAsync(sendBuffer, WebSocketMessageType.Text, endOfMessage: true, cancellationToken: cts.Token);
            }
        }
    }
}	