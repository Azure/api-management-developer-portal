using System;
using System.Net.Http.Headers;
using System.Text;
using System.Net.Http;
using System.Web;
using System.IO;

namespace CSHttpClientSample
{
    static class Program
    {
        static void Main()
        {
            MakeRequest();
            Console.WriteLine("Hit ENTER to exit...");
            Console.ReadLine();
        }

        static async void MakeRequest()
        {
            var client = new HttpClient();

{% if request.meaningfulHeaders.size > 0 %}
            // Request headers
{% for header in request.meaningfulHeaders -%}
{% case header.name | downcase -%}
{%when"content-disposition"-%}
            {%- continue %};
{%when  "content-encoding" -%}
            {%- continue %};
{%when  "content-language" -%}
            {%- continue -%};
{%when  "content-length" %}
            {%- continue -%};
{%when  "content-location" %}
            {%- continue %};
{%when  "content-md5" -%}
            {%- continue %};
{%when  "content-range" -%}
            {%- continue %};
{%when  "content-type" -%}
            {%- continue -%};
{%when  "expires" -%}
            {%- continue %};
{%when  "last-modified" -%}
            {%- continue %};
{% when "accept"%}
            client.DefaultRequestHeaders.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("{{header.displayedValue}}"));
{% when "accept-charset" %}
            client.DefaultRequestHeaders.AcceptCharset.Add(StringWithQualityHeaderValue.Parse("{{header.displayedValue}}"));
{% when "accept-encoding" %}
            client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse("{{header.displayedValue}}"));
{% when "accept-language" %}
            client.DefaultRequestHeaders.AcceptLanguage.Add(StringWithQualityHeaderValue.Parse("{{header.displayedValue}}"));
{% when "cache-control" %}
            client.DefaultRequestHeaders.CacheControl = CacheControlHeaderValue.Parse("{{header.displayedValue}}");
{% when "connection" %}
            client.DefaultRequestHeaders.Connection.Add("{{header.displayedValue}}");
{% when "date" %}
            client.DefaultRequestHeaders.Date = DateTimeOffset.Parse("{{header.displayedValue}}");
{% when "expect" %}
            client.DefaultRequestHeaders.Expect.Add(NameValueWithParametersHeaderValue.Parse("{{header.displayedValue}}"));
{% when "if-match" %}
            client.DefaultRequestHeaders.IfMatch.Add(EntityTagHeaderValue.Parse("{{header.displayedValue}}"));
{% when "if-modified-since" %}
            client.DefaultRequestHeaders.IfModifiedSince = DateTimeOffset.Parse("{{header.displayedValue}}");
{% when "if-none-match" %}
            client.DefaultRequestHeaders.IfNoneMatch.Add(EntityTagHeaderValue.Parse("{{header.displayedValue}}"));
{% when "if-range" %}
            client.DefaultRequestHeaders.IfRange = RangeConditionHeaderValue.Parse("{{header.displayedValue}}");
{% when "if-unmodified-since" %}
            client.DefaultRequestHeaders.IfUnmodifiedSince = DateTimeOffset.Parse("{{header.displayedValue}}");
{% when "max-forwards" %}
            client.DefaultRequestHeaders.MaxForwards = int.Parse("{{header.displayedValue}}");
{% when "pragma" %}
            client.DefaultRequestHeaders.Pragma.Add(NameValueHeaderValue.Parse("{{header.displayedValue}}"));
{% when "range" %}
            client.DefaultRequestHeaders.Range = RangeHeaderValue.Parse("{{header.displayedValue}}");
{% when "referer" %}
            client.DefaultRequestHeaders.Referrer = new Uri("{{header.displayedValue}}");
{% when "te" %}
            client.DefaultRequestHeaders.TE.Add(TransferCodingWithQualityHeaderValue.Parse("{{header.displayedValue}}"));
{% when "transfer-encoding" %}
            client.DefaultRequestHeaders.TransferEncoding.Add(TransferCodingHeaderValue.Parse("{{header.displayedValue}}"));
{% when "upgrade" %}
            client.DefaultRequestHeaders.Upgrade.Add(ProductHeaderValue.Parse("{{header.displayedValue}}"));
{% when "user-agent" %}
            client.DefaultRequestHeaders.UserAgent.Add(ProductInfoHeaderValue.Parse("{{header.displayedValue}}"));
{% when "via" %}
            client.DefaultRequestHeaders.Via.Add(ViaHeaderValue.Parse("{{header.displayedValue}}"));
{% when "warning" %}
            client.DefaultRequestHeaders.Warning.Add(WarningHeaderValue.Parse("{{header.displayedValue}}"));
{% else %}
            client.DefaultRequestHeaders.Add("{{header.name}}", "{{header.displayedValue}}");
{% endcase -%}
{% endfor -%}
{% endif -%}

            var uri = "{{requestUrl}}";

{% case method -%}

{% when "POST" %}
            HttpResponseMessage response;
            {%- if request.body != blank %}
            // Request body
{%- if request.bodyFormat == "raw"  -%}
            {%- assign formattedBody = request.body | replace:'"','\\"' 
            formattedBody = formattedBody | replace: '\r\n', ' ' 
            formattedBody = formattedBody | replace: '     ', ' ' %}

            using (var content = new StringContent("{{formattedBody}}"))
            {
{%- elsif request.bodyFormat == "binary" %}
            using (var content = new StreamContent(File.OpenRead(" < path\\to\\{{request.binary.name}} > ")))
            {
{%- endif %}
    {%- for header in request.meaningfulHeaders -%}
        {% case header.name | downcase -%}
            {%when"content-disposition" %}
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("{{header.displayedValue}}");
            {%when  "content-encoding" %}
                content.Headers.ContentEncoding.Add("{{header.displayedValue}}");
            {%when  "content-language" %}
                content.Headers.ContentLanguage.Add("{{header.displayedValue}}");
            {%when  "content-length" %}
                content.Headers.ContentLength = {{header.displayedValue}};
            {%when  "content-location" %}
                content.Headers.ContentLocation = new Uri("{{header.displayedValue}}"); 
            {%when  "content-md5" %}
                content.Headers.Add("content-md5", "{{header.displayedValue}}");
            {%when  "content-range" %}
                content.Headers.ContentRange = new ContentRangeHeaderValue({{header.displayedValue}});
            {%when  "content-type" %}
                content.Headers.ContentType = new MediaTypeHeaderValue("{{header.displayedValue}}");
            {%when  "expires" %}
                content.Headers.Add("expires", "{{header.displayedValue}}");
            {%when  "last-modified" %}
                content.Headers.Add("last-modified", "{{header.displayedValue}}");
            {% else -%}
                {%- continue -%};
        {% endcase -%}
    {% endfor -%}
{% endif -%}
               response = await client.PostAsync(uri, content);
            }

{% when "GET" -%}
            var response = await client.GetAsync(uri);
{% when "DELETE" -%}
            var response = await client.DeleteAsync(uri);
{% when "PUT" %}
            HttpResponseMessage response;
{% if request.body != blank %}
            // Request body
{%- if request.bodyFormat == "raw"  -%}
            {%- assign formattedBody = request.body | replace:'"','\\"' 
            formattedBody = formattedBody | replace: '\r\n', ' ' 
            formattedBody = formattedBody | replace: '     ', ' ' %}

            using (var content = new StringContent("{{formattedBody}}"))
            {
{%- elsif request.bodyFormat == "binary" %}
            using (var content = new  StreamContent(File.OpenRead(" < path\\to\\{{request.binary.name}} > ")))
            {
{%- endif %}
{%- for header in request.meaningfulHeaders -%}
    {% case header.name | downcase -%}
        {%when"content-disposition" %}
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("{{header.displayedValue}}");
        {%when  "content-encoding" %}
            content.Headers.ContentEncoding.Add("{{header.displayedValue}}");
        {%when  "content-language" %}
            content.Headers.ContentLanguage.Add("{{header.displayedValue}}");
        {%when  "content-length" %}
            content.Headers.ContentLength = {{header.displayedValue}};
        {%when  "content-location" %}
            content.Headers.ContentLocation = new Uri("{{header.displayedValue}}"); 
        {%when  "content-md5" %}
            content.Headers.Add("content-md5", "{{header.displayedValue}}");
        {%when  "content-range" %}
            content.Headers.ContentRange = new ContentRangeHeaderValue({{header.displayedValue}});
        {%when  "content-type" %}
            content.Headers.ContentType = new MediaTypeHeaderValue("{{header.displayedValue}}");
        {%when  "expires" %}
            content.Headers.Add("expires", "{{header.displayedValue}}");
        {%when  "last-modified" %}
            content.Headers.Add("last-modified", "{{header.displayedValue}}");
        {% else -%}
            {%- continue -%};
    {% endcase -%}
{% endfor -%}
{% endif -%}
                response = await client.PutAsync(uri, content);
            }
{% when "HEAD" -%}
            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Head, uri));
{% when "OPTIONS" -%}
            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Options, uri));
{% when "TRACE" -%}
            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Trace, uri));

            if (response.Content != null)
            {
                var responseString = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseString);
            }
{% endcase %}
        }
    }
}
